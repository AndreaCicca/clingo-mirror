diff --git a/include/tsl/hopscotch_hash.h b/include/tsl/hopscotch_hash.h
index 6611ff9..7370a63 100644
--- a/include/tsl/hopscotch_hash.h
+++ b/include/tsl/hopscotch_hash.h
@@ -905,6 +905,20 @@ class hopscotch_hash : private Hash, private KeyEqual, private GrowthPolicy {
     return insert(hint, value_type(std::forward<Args>(args)...));
   }
 
+  template <class K>
+  std::pair<iterator, bool> transparent_insert(K&& key) {
+    const std::size_t hash = hash_key(key);
+    const std::size_t ibucket_for_hash = bucket_for_hash(hash);
+
+    // Check if already presents
+    auto it_find = find_impl(key, hash, m_buckets + ibucket_for_hash);
+    if (it_find != end()) {
+      return std::make_pair(it_find, false);
+    }
+
+    return insert_value(ibucket_for_hash, hash, std::forward<K>(key));
+  }
+
   template <class... Args>
   std::pair<iterator, bool> try_emplace(const key_type& k, Args&&... args) {
     return try_emplace_impl(k, std::forward<Args>(args)...);
diff --git a/include/tsl/hopscotch_set.h b/include/tsl/hopscotch_set.h
index 203b4b7..beabd03 100644
--- a/include/tsl/hopscotch_set.h
+++ b/include/tsl/hopscotch_set.h
@@ -226,6 +226,11 @@ class hopscotch_set {
     m_ht.insert(ilist.begin(), ilist.end());
   }
 
+  template <class K>
+  std::pair<iterator, bool> transparent_insert(K&& key) {
+    return m_ht.transparent_insert(std::forward<K>(key));
+  }
+
   /**
    * Due to the way elements are stored, emplace will need to move or copy the
    * key-value once. The method is equivalent to
